{"version":3,"sources":["components/Words.js","components/images/0.jpg","components/images/1.jpg","components/images/2.jpg","components/images/3.jpg","components/images/4.jpg","components/images/5.jpg","components/images/6.jpg","components/Hangman.js","App.js","serviceWorker.js","index.js"],"names":["programming_languages","randomWord","Math","floor","random","length","Hangman","props","handleGuess","e","letter","target","value","setState","st","guessed","add","mistake","answer","includes","resetButton","Set","state","this","split","map","has","class","onClick","disabled","gameOver","maxWrong","isWinner","guessedWord","join","gameStat","generateButtons","className","role","src","images","alt","Component","defaultProps","step0","step1","step2","step3","step4","step5","step6","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAAIA,G,MAAwB,CACzB,QACG,OACA,WACA,OACA,SACA,WACA,QAIN,SAASC,IACP,OAAOD,EAAsBE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAsBK,SCZjE,UAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCcnCC,E,kDAMJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,YAAc,SAAAC,GACZ,IAAIC,EAASD,EAAEE,OAAOC,MACtB,EAAKC,UAAS,SAAAC,GAAE,MAAK,CACnBC,QAASD,EAAGC,QAAQC,IAAIN,GACxBO,QAASH,EAAGG,SAAWH,EAAGI,OAAOC,SAAST,GAAU,EAAI,QAbzC,EAmCnBU,YAAc,WACZ,EAAKP,SAAS,CACZI,QAAS,EACTF,QAAS,IAAIM,IAAI,IACjBH,OAAQjB,OArCV,EAAKqB,MAAQ,CACXL,QAAS,EACTF,QAAS,IAAIM,IAAI,IACjBH,OAAQjB,KALO,E,0DAiBJ,IAAD,OACZ,OAAOsB,KAAKD,MAAMJ,OAAOM,MAAM,IAAIC,KAAI,SAAAf,GAAM,OAAK,EAAKY,MAAMP,QAAQW,IAAIhB,GAAUA,EAAS,W,wCAG3E,IAAD,OAChB,MAAO,6BAA6Bc,MAAM,IAAIC,KAAI,SAAAf,GAAM,OACtD,wBACEiB,MAAM,6BAENf,MAAOF,EACPkB,QAAS,EAAKpB,YACdqB,SAAU,EAAKP,MAAMP,QAAQW,IAAIhB,GALnC,SAOGA,GALIA,Q,+BAmBT,IAAMoB,EAAWP,KAAKD,MAAML,SAAWM,KAAKhB,MAAMwB,SAC5CC,EAAWT,KAAKU,cAAcC,KAAK,MAAQX,KAAKD,MAAMJ,OACxDiB,EAAWZ,KAAKa,kBAUpB,OARIJ,IACFG,EAAW,yQAGTL,IACFK,EAAW,6JAIX,sBAAKE,UAAU,eAAf,UACE,oBAAIA,UAAU,sBAAsBC,KAAK,QAAzC,4MACA,sBAAKD,UAAU,iBAAf,4BAAgDd,KAAKD,MAAML,QAA3D,OAAwEM,KAAKhB,MAAMwB,YACnF,qBAAKM,UAAU,cAAf,SACE,qBAAKE,IAAKhB,KAAKhB,MAAMiC,OAAOjB,KAAKD,MAAML,SAAUwB,IAAI,OAEvD,sBAAKJ,UAAU,gCAAf,UAEE,8DACA,4BACIP,EAAgCP,KAAKD,MAAMJ,OAAhCK,KAAKU,gBAEpB,4BAAIE,IACJ,wBAAQE,UAAU,eAAeT,QAASL,KAAKH,YAA/C,wEAEF,mBAAGiB,UAAU,eAAb,gE,GA9EcK,aAAhBpC,EACGqC,aAAe,CACpBZ,SAAU,EACVS,OAAQ,CAACI,EAAOC,EAAOC,EAAOC,EAAOC,EAAOC,EAAOC,IAkFxC5C,QCxFA6C,MARf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCMce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c2ea3da8.chunk.js","sourcesContent":["var programming_languages = [\n\t\t\t\"tiger\",\n\t\t    \"lion\",\n\t\t    \"elephant\",\n\t\t    \"frog\",\n\t   \t\t\"monkey\",\n\t\t    \"elegator\",\n\t\t  \t \"dog\"\n\t\n]\n\nfunction randomWord() {\n  return programming_languages[Math.floor(Math.random() * programming_languages.length)]\n}\n\nexport { randomWord }","export default __webpack_public_path__ + \"static/media/0.b95f2a77.jpg\";","export default __webpack_public_path__ + \"static/media/1.540c7c8b.jpg\";","export default __webpack_public_path__ + \"static/media/2.9bcff9f7.jpg\";","export default __webpack_public_path__ + \"static/media/3.90dd0669.jpg\";","export default __webpack_public_path__ + \"static/media/4.f4e51b0a.jpg\";","export default __webpack_public_path__ + \"static/media/5.8bdd4649.jpg\";","export default __webpack_public_path__ + \"static/media/6.fb5454f9.jpg\";","\n\nimport React, { Component } from 'react';\nimport './Hangman.css';\nimport { randomWord } from './Words.js';\n\nimport step0 from \"./images/0.jpg\";\nimport step1 from \"./images/1.jpg\";\nimport step2 from \"./images/2.jpg\";\nimport step3 from \"./images/3.jpg\";\nimport step4 from \"./images/4.jpg\";\nimport step5 from \"./images/5.jpg\";\nimport step6 from \"./images/6.jpg\";\n\nclass Hangman extends Component {\n  static defaultProps = {\n    maxWrong: 6,\n    images: [step0, step1, step2, step3, step4, step5, step6]\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomWord()\n    }\n  }\n\n  handleGuess = e => {\n    let letter = e.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(letter),\n      mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n    }));\n  }\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(letter => (this.state.guessed.has(letter) ? letter : \" _ \"));\n  }\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => (\n      <button\n        class='btn btn-lg btn-primary m-3'\n        key={letter}\n        value={letter}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(letter)}\n      >\n        {letter}\n      </button>\n    ));\n  }\n\n  resetButton = () => {\n    this.setState({\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomWord()\n    });\n  }\n\n  render() {\n    const gameOver = this.state.mistake >= this.props.maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    let gameStat = this.generateButtons();\n\n    if (isWinner) {\n      gameStat = \"তুমি প্রানীটির নাম সঠিকভাবে বলতে পেরেছো,অভিনন্দন!!!\"\n    }\n\n    if (gameOver) {\n      gameStat = \"নামটি সঠিক নয়, আবার চেষ্টা করো!!!\"\n    }\n\n    return (\n      <div className=\"container-lg\">\n        <h1 className=\"alert alert-primary\" role=\"alert\">\"এসো খেলি মজার একটি বানান শেখার খেলা\" Hangman</h1>\n        <div className=\"btn btn-danger\">Wrong Guesses: {this.state.mistake} of {this.props.maxWrong}</div>\n        <div className=\"text-center\">\n          <img src={this.props.images[this.state.mistake]} alt=\"\"/>\n        </div>\n        <div className=\"badge badge-primary text-wrap\">\n          \n          <h1 >Guess the Name of an animal:</h1>\n          <p>\n            {!gameOver ? this.guessedWord() : this.state.answer}\n          </p>\n          <p>{gameStat}</p>\n          <button className='btn btn-info' onClick={this.resetButton}>আবার খেলবো</button>\n        </div>\n        <p className=\"btn btn-info\" >Powered by: Simon J. Suh and Shahnawaz Ayon\n</p>\n      </div>\n    )\n  }\n}\n\nexport default Hangman;\n","import React from 'react';\nimport Hangman from './components/Hangman';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}